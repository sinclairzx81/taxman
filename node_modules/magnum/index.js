/*--------------------------------------------------------------------------

﻿The MIT License (MIT)

Copyright (c) 2013 Haydn Paterson (sinclair) <haydn.developer@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

--------------------------------------------------------------------------*/

﻿var magnum;
(function (magnum) {
    (function (io) {
        var Buffer = (function () {
            function Buffer() {
            }
            Buffer.process = function (buffer) {
                switch (buffer[0]) {
                    case 0xFE:
                        if (buffer[1] == 0xFF) {
                            var i = 0;

                            while ((i + 1) < buffer.length) {
                                var temp = buffer[i];

                                buffer[i] = buffer[i + 1];

                                buffer[i + 1] = temp;

                                i += 2;
                            }

                            return buffer.toString("ucs2", 2);
                        }

                        break;
                    case 0xFF:
                        if (buffer[1] == 0xFE) {
                            return buffer.toString("ucs2", 2);
                        }

                        break;

                    case 0xEF:
                        if (buffer[1] == 0xBB) {
                            return buffer.toString("utf8", 3);
                        }
                }

                return buffer.toString();
            };
            return Buffer;
        })();
        io.Buffer = Buffer;
    })(magnum.io || (magnum.io = {}));
    var io = magnum.io;
})(magnum || (magnum = {}));
var node = {
    http: require('http'),
    https: require('https'),
    fs: require('fs'),
    vm: require('vm'),
    path: require('path'),
    child_process: require('child_process'),
    url: require('url'),
    util: require('util'),
    querystring: require('querystring')
};
var magnum;
(function (magnum) {
    (function (util) {
        var Path = (function () {
            function Path() {
            }
            Path.isAbsoluteUrl = function (path) {
                var regex = new RegExp("^(http[s]?:\\/\\/(www\\.)?|ftp[s]?:\\/\\/(www\\.)?|www\\.){1}([0-9A-Za-z-\\.@:%_\+~#=]+)+((\\.[a-zA-Z]{2,3})+)(/(.)*)?(\\?(.)*)?");

                return regex.test(path);
            };

            Path.isAbsoluteUrn = function (path) {
                var regex = new RegExp("^(?:[a-xA-Z]:(/|\))|(?:file://)");

                return regex.test(path);
            };

            Path.isRootRelative = function (path) {
                return path.indexOf('/') == 0 && path.indexOf('//') != 0;
            };

            Path.isAbsolute = function (path) {
                if (!magnum.util.Path.isAbsoluteUrl(path)) {
                    if (!magnum.util.Path.isAbsoluteUrn(path)) {
                        return false;
                    }
                }

                return true;
            };

            Path.isRelative = function (path) {
                if (!Path.isAbsoluteUrl(path)) {
                    if (!Path.isAbsoluteUrn(path)) {
                        if (!(path.indexOf('/') == 0)) {
                            return true;
                        }
                    }
                }
                return false;
            };

            Path.toForwardSlashes = function (path) {
                return path.replace(/\\/gi, "/");
            };

            Path.relativeToAbsolute = function (absolute_parent_path, relative_path) {
                if (Path.isRelative(relative_path)) {
                    var absolute_parent_directory = node.path.dirname(absolute_parent_path);

                    return node.path.join(absolute_parent_directory, relative_path);
                }

                return relative_path;
            };

            Path.makeAbsolute = function (path) {
                if (!magnum.util.Path.isAbsolute(path)) {
                    return node.path.resolve('./', path);
                }

                return path;
            };
            return Path;
        })();
        util.Path = Path;
    })(magnum.util || (magnum.util = {}));
    var util = magnum.util;
})(magnum || (magnum = {}));
var magnum;
(function (magnum) {
    (function (io) {
        var IOSync = (function () {
            function IOSync() {
            }
            IOSync.prototype.load = function (filename) {
                filename = magnum.util.Path.toForwardSlashes(filename);

                try  {
                    var content = node.fs.readFileSync(filename);

                    return magnum.io.Buffer.process(content);
                } catch (e) {
                    return e.toString().replace(/\\/g, '/');
                }
            };
            return IOSync;
        })();
        io.IOSync = IOSync;
    })(magnum.io || (magnum.io = {}));
    var io = magnum.io;
})(magnum || (magnum = {}));
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var magnum;
(function (magnum) {
    var Declaration = (function () {
        function Declaration(type, start, length, body_start, body_length) {
            this.type = type;
            this.start = start;
            this.length = length;
            this.body_start = body_start;
            this.body_length = body_length;
            this.declarations = [];
        }
        return Declaration;
    })();
    magnum.Declaration = Declaration;

    var Document = (function (_super) {
        __extends(Document, _super);
        function Document(filename, content) {
            _super.call(this, 'document', 0, content.length, 0, content.length);

            this.content = content;

            this.filename = filename;

            var scanner = new magnum.Scanner(this, content);

            this.declarations = scanner.declarations;
        }
        return Document;
    })(magnum.Declaration);
    magnum.Document = Document;

    var ImportDeclaration = (function (_super) {
        __extends(ImportDeclaration, _super);
        function ImportDeclaration(filename, start, length) {
            this.filename = filename;

            _super.call(this, 'import', start, length, 0, 0);
        }
        return ImportDeclaration;
    })(magnum.Declaration);
    magnum.ImportDeclaration = ImportDeclaration;

    var RenderDeclaration = (function (_super) {
        __extends(RenderDeclaration, _super);
        function RenderDeclaration(filename, start, length) {
            this.filename = filename;

            _super.call(this, 'render', start, length, 0, 0);
        }
        return RenderDeclaration;
    })(magnum.Declaration);
    magnum.RenderDeclaration = RenderDeclaration;

    var SectionDeclaration = (function (_super) {
        __extends(SectionDeclaration, _super);
        function SectionDeclaration(content, name, start, length, body_start, body_length) {
            this.name = name;

            _super.call(this, 'section', start, length, body_start, body_length);

            var scanner = new magnum.Scanner(this, content);

            this.declarations = scanner.declarations;
        }
        return SectionDeclaration;
    })(magnum.Declaration);
    magnum.SectionDeclaration = SectionDeclaration;

    var ForDeclaration = (function (_super) {
        __extends(ForDeclaration, _super);
        function ForDeclaration(content, expression, start, length, body_start, body_length) {
            this.expression = expression;

            _super.call(this, 'for', start, length, body_start, body_length);

            var scanner = new magnum.Scanner(this, content);

            this.declarations = scanner.declarations;
        }
        return ForDeclaration;
    })(magnum.Declaration);
    magnum.ForDeclaration = ForDeclaration;

    var IfDeclaration = (function (_super) {
        __extends(IfDeclaration, _super);
        function IfDeclaration(content, expression, start, length, body_start, body_length) {
            this.expression = expression;

            _super.call(this, 'if', start, length, body_start, body_length);

            var scanner = new magnum.Scanner(this, content);

            this.declarations = scanner.declarations;
        }
        return IfDeclaration;
    })(magnum.Declaration);
    magnum.IfDeclaration = IfDeclaration;

    var CodeDeclaration = (function (_super) {
        __extends(CodeDeclaration, _super);
        function CodeDeclaration(content, start, length, body_start, body_length) {
            _super.call(this, 'code', start, length, body_start, body_length);
        }
        return CodeDeclaration;
    })(magnum.Declaration);
    magnum.CodeDeclaration = CodeDeclaration;

    var ExpressionDeclaration = (function (_super) {
        __extends(ExpressionDeclaration, _super);
        function ExpressionDeclaration(content, expression, start, length) {
            this.expression = expression;

            _super.call(this, 'expression', start, length, 0, 0);
        }
        return ExpressionDeclaration;
    })(magnum.Declaration);
    magnum.ExpressionDeclaration = ExpressionDeclaration;

    var CommentDeclaration = (function (_super) {
        __extends(CommentDeclaration, _super);
        function CommentDeclaration(content, comment, start, length) {
            this.comment = comment;

            _super.call(this, 'comment', start, length, 0, 0);
        }
        return CommentDeclaration;
    })(magnum.Declaration);
    magnum.CommentDeclaration = CommentDeclaration;

    var ContentDeclaration = (function (_super) {
        __extends(ContentDeclaration, _super);
        function ContentDeclaration(start, length) {
            _super.call(this, 'content', start, length, 0, 0);
        }
        return ContentDeclaration;
    })(magnum.Declaration);
    magnum.ContentDeclaration = ContentDeclaration;

    var Scanner = (function () {
        function Scanner(declaration, content) {
            this.declaration = declaration;
            this.content = content;
            this.declarations = [];

            this.scan();
        }
        Scanner.prototype.max = function () {
            return (this.declaration.body_start + this.declaration.body_length);
        };

        Scanner.prototype.read = function (start, length) {
            return this.content.substr(start, length);
        };

        Scanner.prototype.advance = function (index) {
            for (var i = index; i < this.max(); i++) {
                var code = this.content.charCodeAt(i);

                if ((code >= 48 && code <= 57) || (code >= 65 && code <= 122) || code == 123 || code == 125 || code == 64 || code == 40 || code == 41 || code == 34 || code == 39) {
                    return i;
                }
            }

            return this.max();
        };

        Scanner.prototype.advanceto = function (index, code) {
            for (var i = index; i < this.max(); i++) {
                var _code = this.content.charCodeAt(i);

                if (_code == code) {
                    return (i);
                }
            }

            return this.max();
        };

        Scanner.prototype.scan_section = function (index) {
            var name = '';

            var start = index;

            var length = 0;

            var body_start = 0;

            var body_length = 0;

            var cursor = (index + 8);

            if (this.content.charCodeAt(cursor) != 32) {
                return index;
            }

            cursor = this.advance(cursor);

            if (this.content.charAt(cursor) == '{') {
                return index;
            }

            for (var i = cursor; i < this.max(); i++) {
                var code = this.content.charCodeAt(i);

                if (i == (this.max() - 1)) {
                    return index;
                }

                if ((code < 48 || code > 57) && (code < 65 || code > 122)) {
                    name = this.read(cursor, i - cursor);

                    cursor = i;

                    break;
                }
            }

            var peek = this.advance(cursor);

            if (this.content.charAt(peek) != '{') {
                var declaration = new magnum.SectionDeclaration(this.content, name, start, (cursor - index), 0, 0);

                this.declarations.push(declaration);

                return cursor;
            }

            var count = 0;

            for (var i = cursor; i < this.max(); i++) {
                var ch = this.content.charAt(i);

                if (ch == '{') {
                    if (count == 0) {
                        body_start = i + 1;
                    }

                    count += 1;
                }

                if (ch == '}') {
                    count -= 1;

                    if (count == 0) {
                        body_length = (i - body_start);

                        length = (i - index) + 1;

                        break;
                    }
                }
            }

            var declaration = new magnum.SectionDeclaration(this.content, name, start, length, body_start, body_length);

            this.declarations.push(declaration);

            return index + declaration.length;
        };

        Scanner.prototype.scan_import = function (index) {
            var filename = '';

            var start = index;

            var length = 0;

            var cursor = (index + 7);

            cursor = this.advance(cursor);

            var quote_flag = 0;

            var code = this.content.charCodeAt(cursor);

            if (code == 39 || code == 34) {
                quote_flag = code;
            } else {
                return (index);
            }

            cursor += 1;

            for (var i = cursor; i < this.max(); i++) {
                var code = this.content.charCodeAt(i);

                if (code == 10 || code == 13) {
                    return index;
                }

                if (code == quote_flag) {
                    filename = this.read(cursor, i - cursor);

                    length = (i - index) + 1;

                    break;
                }
            }

            var declaration = new magnum.ImportDeclaration(filename, start, length);

            this.declarations.push(declaration);

            return index + declaration.length;
        };

        Scanner.prototype.scan_render = function (index) {
            var filename = '';

            var start = index;

            var length = 0;

            var cursor = (index + 7);

            cursor = this.advance(cursor);

            var quote_flag = 0;

            var code = this.content.charCodeAt(cursor);

            if (code == 39 || code == 34) {
                quote_flag = code;
            } else {
                return (index);
            }

            cursor += 1;

            for (var i = cursor; i < this.max(); i++) {
                var code = this.content.charCodeAt(i);

                if (code == 10 || code == 13) {
                    return index;
                }

                if (code == quote_flag) {
                    filename = this.read(cursor, i - cursor);

                    length = (i - index) + 1;

                    break;
                }
            }

            var declaration = new magnum.RenderDeclaration(filename, start, length);

            this.declarations.push(declaration);

            return index + declaration.length;
        };

        Scanner.prototype.scan_for = function (index) {
            var expression = '';

            var start = index;

            var length = 0;

            var body_start = 0;

            var body_length = 0;

            var cursor = index + 4;

            cursor = this.advance(cursor);

            if (this.content.charCodeAt(cursor) != 40) {
                return index;
            }

            var bracket_count = 0;

            for (var i = cursor; i < this.max(); i++) {
                var code = this.content.charCodeAt(i);

                if (code == 10 || code == 13) {
                    return index;
                }

                if (code == 40) {
                    bracket_count += 1;
                }

                if (code == 41) {
                    bracket_count -= 1;

                    if (bracket_count == 0) {
                        expression = this.read(cursor, (i - cursor) + 1);

                        cursor = (i + 1);

                        break;
                    }
                }
            }

            cursor = this.advance(cursor);

            if (this.content.charCodeAt(cursor) != 123) {
                return index;
            }

            var count = 0;

            for (var i = cursor; i < this.max(); i++) {
                var ch = this.content.charAt(i);

                if (ch == '{') {
                    if (count == 0) {
                        body_start = (i + 1);
                    }

                    count += 1;
                }

                if (ch == '}') {
                    count -= 1;

                    if (count == 0) {
                        body_length = (i - body_start);

                        length = (i - index) + 1;

                        break;
                    }
                }
            }

            var declaration = new magnum.ForDeclaration(this.content, expression, start, length, body_start, body_length);

            this.declarations.push(declaration);

            return index + declaration.length;
        };

        Scanner.prototype.scan_if = function (index) {
            var expression = '';

            var start = index;

            var length = 0;

            var body_start = 0;

            var body_length = 0;

            var cursor = index + 3;

            cursor = this.advance(cursor);

            if (this.content.charCodeAt(cursor) != 40) {
                return index;
            }

            var bracket_count = 0;

            for (var i = cursor; i < this.max(); i++) {
                var code = this.content.charCodeAt(i);

                if (code == 10 || code == 13) {
                    return index;
                }

                if (code == 40) {
                    bracket_count += 1;
                }

                if (code == 41) {
                    bracket_count -= 1;

                    if (bracket_count == 0) {
                        expression = this.read(cursor, (i - cursor) + 1);

                        cursor = (i + 1);

                        break;
                    }
                }
            }

            cursor = this.advance(cursor);

            if (this.content.charCodeAt(cursor) != 123) {
                return index;
            }

            var count = 0;

            for (var i = cursor; i < this.max(); i++) {
                var ch = this.content.charAt(i);

                if (ch == '{') {
                    if (count == 0) {
                        body_start = (i + 1);
                    }

                    count += 1;
                }

                if (ch == '}') {
                    count -= 1;

                    if (count == 0) {
                        body_length = (i - body_start);

                        length = (i - index) + 1;

                        break;
                    }
                }
            }

            var declaration = new magnum.IfDeclaration(this.content, expression, start, length, body_start, body_length);

            this.declarations.push(declaration);

            return index + declaration.length;
        };

        Scanner.prototype.scan_code = function (index) {
            var start = index;

            var length = 0;

            var body_start = index + 2;

            var body_length = 0;

            var cursor = index + 1;

            var count = 0;

            for (var i = cursor; i < this.max(); i++) {
                var ch = this.content.charAt(i);

                if (ch == '{') {
                    count += 1;
                }

                if (ch == '}') {
                    count -= 1;

                    if (count == 0) {
                        body_length = (i - body_start);

                        length = (i - index) + 1;

                        break;
                    }
                }
            }

            var declaration = new magnum.CodeDeclaration(this.content, start, length, body_start, body_length);

            this.declarations.push(declaration);

            return index + declaration.length;
        };

        Scanner.prototype.scan_expression = function (index) {
            var expression = '';

            var start = index;

            var length = 0;

            var cursor = (index + 1);

            cursor = this.advance(cursor);

            var code = this.content.charCodeAt(cursor);

            if (code != 40) {
                return index;
            }

            var bracket_count = 0;

            for (var i = cursor; i < this.max(); i++) {
                var code = this.content.charCodeAt(i);

                if (code == 10 || code == 13) {
                    return index;
                }

                if (code == 40) {
                    bracket_count += 1;
                }

                if (code == 41) {
                    bracket_count -= 1;

                    if (bracket_count == 0) {
                        expression = this.read(cursor, (i - cursor) + 1);

                        length = (i - index) + 1;

                        break;
                    }
                }
            }

            var declaration = new magnum.ExpressionDeclaration(this.content, expression, start, length);

            this.declarations.push(declaration);

            return index + declaration.length;
        };

        Scanner.prototype.scan_comment = function (index) {
            var comment = '';

            var start = index;

            var length = 0;

            var cursor = index + 2;

            for (var i = cursor; i < this.max(); i++) {
                var code = this.content.charCodeAt(i);

                if (code == 42) {
                    if (this.content.charCodeAt(i + 1) == 64) {
                        i = i + 1;

                        comment = this.read(index, (i - cursor) + 2);

                        length = (i - index) + 1;

                        break;
                    }
                }
            }

            var declaration = new magnum.CommentDeclaration(this.content, comment, start, length);

            this.declarations.push(declaration);

            return index + declaration.length;
        };

        Scanner.prototype.scan_content = function (index) {
            var cursor = this.advanceto(index + 1, 64);

            var declaration = new magnum.ContentDeclaration(index, cursor - index);

            if (declaration.length > 0) {
                this.declarations.push(declaration);
            }

            return (index + declaration.length);
        };

        Scanner.prototype.scan = function () {
            var index = this.declaration.body_start;

            do {
                if (this.content.substr(index, 8) === '@section') {
                    var next = this.scan_section(index);

                    if (next > index) {
                        index = next;

                        continue;
                    }
                }

                if (this.content.substr(index, 7) === '@import') {
                    var next = this.scan_import(index);

                    if (next > index) {
                        index = next;

                        continue;
                    }
                }

                if (this.content.substr(index, 7) === '@render') {
                    var next = this.scan_render(index);

                    if (next > index) {
                        index = next;

                        continue;
                    }
                }

                if (this.content.substr(index, 4) === '@for') {
                    var next = this.scan_for(index);

                    if (next > index) {
                        index = next;

                        continue;
                    }
                }

                if (this.content.substr(index, 3) === '@if') {
                    var next = this.scan_if(index);

                    if (next > index) {
                        index = next;

                        continue;
                    }
                }

                if (this.content.substr(index, 2) === '@{') {
                    var next = this.scan_code(index);

                    if (next > index) {
                        index = next;

                        continue;
                    }
                }

                if (this.content.substr(index, 2) === '@(') {
                    var next = this.scan_expression(index);

                    if (next > index) {
                        index = next;

                        continue;
                    }
                }

                if (this.content.substr(index, 2) === '@*') {
                    var next = this.scan_comment(index);

                    if (next > index) {
                        index = next;

                        continue;
                    }
                }

                index = this.scan_content(index);
            } while(index < this.max());
        };
        return Scanner;
    })();
    magnum.Scanner = Scanner;
})(magnum || (magnum = {}));
var magnum;
(function (magnum) {
    var Parser = (function () {
        function Parser(filename) {
            this.filename = filename;
            this.output = [];

            this.io = new magnum.io.IOSync();

            var filename = magnum.util.Path.makeAbsolute(filename);

            var content = this.io.load(filename);

            this.document = new magnum.Document(filename, content);

            for (var n in this.document.declarations) {
                if (this.document.declarations[n].type == 'import') {
                    var import_declaration = this.document.declarations[n];

                    filename = magnum.util.Path.relativeToAbsolute(this.document.filename, import_declaration.filename);

                    var content = this.io.load(filename);

                    this.reference_document = this.document;

                    this.document = new magnum.Document(filename, content);

                    return;
                }
            }
        }
        Parser.prototype.parse = function () {
            this.write('var template = function() {');

            this.write('    this.buffer = []');

            this.write('    this.write = function(data) {');

            this.write('        this.buffer.push(data.toString())');

            this.write('     }');

            this.write('    this.render = function(context) {');

            this.write('        this.buffer = []');

            this.emit(this.document, this.document);

            this.write('        return this.buffer.join(\'\')');

            this.write('     }');

            this.write('}');

            return this.output.join('');
        };

        Parser.prototype.emit = function (current_document, declaration) {
            switch (declaration.type) {
                case 'import':
                    break;

                case 'render':
                    var render_declaration = declaration;

                    var filename = magnum.util.Path.relativeToAbsolute(current_document.filename, render_declaration.filename);

                    var content = this.io.load(filename);

                    var document = new magnum.Document(filename, content);

                    this.emit(document, document);

                    return;

                    break;

                case 'section':
                    var section_declaration = declaration;

                    if (this.reference_document) {
                        for (var n in this.reference_document.declarations) {
                            if (this.reference_document.declarations[n].type == 'section') {
                                var reference_section_declaration = this.reference_document.declarations[n];

                                if (reference_section_declaration.name == section_declaration.name) {
                                    for (var m in reference_section_declaration.declarations) {
                                        this.emit(this.reference_document, reference_section_declaration.declarations[m]);
                                    }

                                    return;
                                }
                            }
                        }
                    }

                    break;

                case 'for':
                    var for_declaration = declaration;

                    this.write('        ' + for_declaration.type + for_declaration.expression + '{');

                    break;

                case 'if':
                    var if_declaration = declaration;

                    this.write('        ' + if_declaration.type + if_declaration.expression + '{');

                    break;

                case 'expression':
                    var expression_declaration = declaration;

                    console.log(expression_declaration.expression);

                    this.write('        this.write' + expression_declaration.expression);

                    break;

                case 'code':
                    this.write('      ' + this.read(current_document, declaration.body_start, declaration.body_length));

                    break;

                case 'content':
                    this.write_literal(this.read(current_document, declaration.start, declaration.length));

                    break;
            }

            for (var n in declaration.declarations) {
                this.emit(current_document, declaration.declarations[n]);
            }

            switch (declaration.type) {
                case 'for':

                case 'if':
                    this.write('        }');

                    break;
            }
        };

        Parser.prototype.read = function (document, start, length) {
            return document.content.substr(start, length);
        };

        Parser.prototype.write = function (content) {
            this.output.push(content + '\n');
        };

        Parser.prototype.write_literal = function (content) {
            content = content.replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/'/g, '\\\'');

            this.write('        this.write(\'' + content + '\')');
        };
        return Parser;
    })();
    magnum.Parser = Parser;
})(magnum || (magnum = {}));
var magnum;
(function (magnum) {
    function ParseEngineOptions(options) {
        if (!options) {
            options = {
                cache: false
            };

            return options;
        }

        if (!options.cache) {
            options.cache = false;
        }

        return options;
    }
    magnum.ParseEngineOptions = ParseEngineOptions;
})(magnum || (magnum = {}));
var magnum;
(function (magnum) {
    var Engine = (function () {
        function Engine(options) {
            this.options = options;
            this.options = magnum.ParseEngineOptions(options);

            this.cache = [];
        }
        Engine.prototype.compile = function (filename) {
            var parser = new magnum.Parser(filename);

            var code = parser.parse();

            try  {
                var script = node.vm.createScript(code + ' exports = new template()', filename);

                var sandbox = { exports: {} };

                script.runInNewContext(sandbox);

                var template = sandbox.exports;

                return template;
            } catch (e) {
                return {
                    render: function (context) {
                        return e.toString();
                    }
                };
            }
        };

        Engine.prototype.render = function (filename, context) {
            if (this.options.cache == true) {
                if (this.cache[filename]) {
                    var template = this.cache[filename];

                    return template.render(context || {});
                }
            }

            var parser = new magnum.Parser(filename);

            var code = parser.parse();

            try  {
                var script = node.vm.createScript(code + ' exports = new template()', filename);

                var sandbox = { exports: {} };

                script.runInNewContext(sandbox);

                var template = sandbox.exports;

                var result = template.render(context || {});

                this.cache[filename] = template;

                return result;
            } catch (e) {
                return e.toString();
            }
        };
        return Engine;
    })();
    magnum.Engine = Engine;
})(magnum || (magnum = {}));
module.exports = magnum;

var engine = null;

function initialize() {
    if (!engine) {
        engine = new magnum.Engine({ cache: false });
    }
}

module.exports.render = function (path, context) {
    initialize();

    return engine.render(path, context);
};

module.exports.compile = function (path) {
    initialize();

    var template = engine.compile(path);

    return template;
};
