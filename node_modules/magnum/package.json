{
  "name": "magnum",
  "version": "0.1.7",
  "description": "General purpose javascript template engine inspired by Microsoft Razor templates.",
  "main": "index.js",
  "directories": {},
  "dependencies": {},
  "devDependencies": {},
  "scripts": {},
  "repository": {
    "type": "git",
    "url": "https://github.com/sinclairzx81/magnum.git"
  },
  "keywords": [
    "template",
    "template engine",
    "microsoft razor",
    "razor",
    "general purpose"
  ],
  "author": {
    "name": "sinclair"
  },
  "licenses": [
    {
      "type": "The MIT License (MIT)",
      "url": "https://raw.github.com/sinclairzx81/magnum/master/license.txt"
    }
  ],
  "readmeFilename": "readme.md",
  "readme": "ï»¿![](https://raw.github.com/sinclairzx81/magnum/master/logo.png)\r\n\r\nA easy to use, general purpose template engine for nodejs. \r\n\r\n### install\r\n\r\n\tnpm install magnum\r\n\r\n### contents\r\n* [overview](#overview)\r\n* [example](#example)\r\n* [api](#api)\r\n\t* [render](#render)\r\n\t* [compile](#compile)\r\n\t* [context](#context)\r\n* [syntax](#syntax)\r\n\t* [expressions](#expressions)\r\n\t* [if statements](#if)\r\n\t* [for statements](#for)\r\n\t* [comments](#commentblock)\r\n\t* [code blocks](#codeblock)\r\n* [layouts](#layouts)\r\n\t* [import](#import)\r\n\t* [render](#render)\r\n\r\n\r\n<a name='overview' />\r\n### overview\r\n\r\nMagnum is a general purpose logic driven templating engine for nodejs developers. Magnum templates allow developers to script \r\nview logic with javascript syntax, with the intent to allow for the templating of any text based format. Inspired by Microsoft Razor.\r\n\r\n<a name='example' />\r\n### example\r\n\r\nThe following is a quick example demonstrating rendering a template.\r\n\r\n##### layout.html\r\n```html\r\n\r\n<html>\r\n\r\n\t<head>\r\n\r\n\t\t@section header\r\n\r\n\t</head>\r\n\r\n\t<body>\r\n\r\n\t\t@section body\r\n\r\n\t</body>\r\n\r\n</html>\r\n```\r\n\r\n##### view.html\r\n```html\r\n\r\n@import 'layout.html'\r\n\r\n@section header {\r\n\r\n\t<title>@(context.title)</html>\r\n}\r\n\r\n@section body {\r\n\r\n\t<h1>Welcome</h1>\r\n}\r\n```\r\n\r\n##### app.js\r\n```javascript\r\nvar magnum = require('magnum')\r\n\r\nvar context = { title: 'my page'}\r\n\r\nvar html = magnum.render('./view.html', context)\r\n\r\nconsole.log(html)\r\n```\r\n\r\n##### outputs\r\n\r\n```html\r\n<html>\r\n\r\n\t<head>\r\n\r\n\t\t<title>my page</html>\r\n\r\n\t</head>\r\n\r\n\t<body>\r\n\r\n\t\t<h1>Welcome</h1>\r\n\r\n\t</body>\r\n\r\n</html>\r\n```\r\n\r\n<a name='api' />\r\n### api\r\n\r\nThe following outlines magnums methods.\r\n\r\n<a name='compile' />\r\n#### compile\r\n\r\nThe compile() method compiles the template file and returns a template object. \r\n\r\n```javascript\r\n\r\nvar magnum   = require('magnum')\r\n\r\nvar template = magnum.compile('./view.html')  // store for later\r\n\r\n//...later\r\n\r\nvar context = {title: 'my page'}\r\n\r\nvar html     = template.render(context) // render \r\n\r\nconsole.log(html)\r\n```\r\n\r\n<a name='render' />\r\n#### render\r\n\r\nIf you \r\n\r\n```javascript\r\nvar magnum = require('magnum')\r\n\r\nvar output = magnum.render('./view.html')\r\n\r\n```\r\n\r\n#### context\r\n\r\nWhen calling render() on a template (or via magnum itself), you can optionally pass a data context object to be rendered. \r\nMagnum encapulates all data passed on the \"context\"\r\nobject which is passed to magnum template on the render() method. Consider the following..\r\n\r\n##### app.js\r\n```javascript\r\n\r\nvar magnum   = require('magnum')\r\n\r\nvar context = {name   : 'dave', \r\n\t\t       fruits : ['apples', 'oranges', 'kiwifruit', 'mangos', 'grapes' ]}\r\n\r\nvar html = magnum.render('./template.html', context)\r\n```\r\n\r\nthe context can be accessed in the following way...\r\n\r\n##### template.html\r\n```html\r\n\r\n<p>Hi @(context.name)</p>\r\n\r\n<ul>\r\n\r\n\t@for(var i = 0; i < context.fruits.length; i++) {\r\n\r\n\t\t<li>@(context.fruits[i])</li>\r\n\t}\r\n\r\n</ul>\r\n```\r\n\r\n<a name='syntax' />\r\n### syntax\r\n\r\nThe following syntax is available inside magnum templates.\r\n\r\n<a name='expressions' />\r\n#### expressions\r\n\r\nThe expression syntax allows a user to emit the value within. The following are examples. \r\n\r\n```\r\n@* strings *@\r\n@('hello world')\r\n\r\n@* numbers *@\r\n@(123)\r\n\r\n@* conditions: displays false) *@\r\n@(10 > 20)\r\n\r\n@* ternary: displays 'cat' *@\r\n@(true ? 'cat' : 'dog')\r\n\r\n@* variables *@\r\n@(myvariable)\r\n\r\n@* functions: displays 'hello world' *@\r\n@{ var message = function() { return 'hello world' })\r\n\r\n@(message())\r\n\r\n```\r\n\r\n<a name='if' />\r\n#### if statement\r\n\r\nif statments are supported.\r\n\r\n```\r\n@if(expression) {\r\n\tsome content\r\n}\r\n\r\n@if(a > 10) {\r\n\tsome content\r\n}\r\n\r\n@(user.loggedin) {\r\n\t<span>welcome</span>\r\n}\r\n```\r\n\r\n<a name='for' />\r\n#### for statement\r\n\r\nthe following for loops are supported.\r\n\r\n```\r\n@for(var i = i; i < 100; i++) {\r\n\t@(i)\r\n}\r\n\r\n@for(var n in list) {\r\n\t@(list[n])\r\n}\r\n```\r\n\r\n\r\n<a name='codeblock' />\r\n#### code\r\n\r\ncode blocks can be useful for adding template side rendering logic.\r\n\r\n```\r\n@{\r\n\tvar message = 'hello'\r\n}\r\n\r\n@(message)\r\n```\r\n\r\n<a name='commentblock' />\r\n#### comments\r\n```\r\n@*\r\n\tthis comment will not be rendered!\r\n*@\r\n```\r\n\r\n<a name=\"template_layouts_and_sections\" />\r\n### layouts and sections\r\n\r\nMangum supports layouts and sections. This section describes how to use them.\r\n\r\n#### import\r\n\r\nUse the import statement to have one template inheriate from another. This will allow the child template to (optionally) override the \r\nsections of the parent. \r\n\r\n##### layout.html\r\nlayout.html will be the parent template, here we define three sections.. header, body and footer. \r\n\r\n```html\r\n<html>\r\n\r\n\t<head>\r\n\r\n\t\t@section header\r\n\r\n\t</head>\r\n\r\n\t<body>\r\n\r\n\t\t@section body\r\n\r\n\t\t@section footer {\r\n\r\n\t\t\t<span>copyright 2013</span>\r\n\t\t}\r\n\t</body>\r\n\r\n</html>\r\n```\r\n\r\n##### view.html\r\nInside view.html, we inheriate from layout.html with the import keyword. Inside view.html, we define sections for header and body. Note that\r\nthe default content for the footer not overridden. If the child template does not override a parents section, the parents section will be used\r\ninstead.\r\n\r\n```html\r\n@import 'layout.html'\r\n\r\n@section header {\r\n\r\n\t<title>@(context.title)</html>\r\n}\r\n\r\n@section body {\r\n\r\n\t<h1>Welcome</h1>\r\n}\r\n```\r\n\r\n#### render\r\n\r\nMagnum templates allow the user to render snippets of content in place. The following renders a template named navigation.html in place. \r\n\r\n##### navigation.html\r\n```html\r\n\r\n\t<ul>\r\n\r\n\t\t<li><a href='#'>home</a></li>\r\n\r\n\t\t<li><a href='#'>about</a></li>\r\n\r\n\t\t<li><a href='#'>contact</a></li>\r\n\r\n\t</ul>\r\n```\r\n\r\n##### layout.html\r\n```html\r\n<html>\r\n\r\n\t<head>\r\n\r\n\t</head>\r\n\r\n\t<body>\r\n\r\n\t\t@render 'navigation.html'\r\n\r\n\t\t@section content\r\n\r\n\t</body>\r\n\r\n</html>\r\n```\r\n",
  "bugs": {
    "url": "https://github.com/sinclairzx81/magnum/issues"
  },
  "_id": "magnum@0.1.7",
  "_from": "magnum@"
}
